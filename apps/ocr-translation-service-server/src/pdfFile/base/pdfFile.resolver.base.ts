/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PdfFile } from "./PdfFile";
import { PdfFileCountArgs } from "./PdfFileCountArgs";
import { PdfFileFindManyArgs } from "./PdfFileFindManyArgs";
import { PdfFileFindUniqueArgs } from "./PdfFileFindUniqueArgs";
import { CreatePdfFileArgs } from "./CreatePdfFileArgs";
import { UpdatePdfFileArgs } from "./UpdatePdfFileArgs";
import { DeletePdfFileArgs } from "./DeletePdfFileArgs";
import { OcrResultFindManyArgs } from "../../ocrResult/base/OcrResultFindManyArgs";
import { OcrResult } from "../../ocrResult/base/OcrResult";
import { PdfFileCreateInput } from "./PdfFileCreateInput";
import { PdfFileService } from "../pdfFile.service";
@graphql.Resolver(() => PdfFile)
export class PdfFileResolverBase {
  constructor(protected readonly service: PdfFileService) {}

  async _pdfFilesMeta(
    @graphql.Args() args: PdfFileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PdfFile])
  async pdfFiles(
    @graphql.Args() args: PdfFileFindManyArgs
  ): Promise<PdfFile[]> {
    return this.service.pdfFiles(args);
  }

  @graphql.Query(() => PdfFile, { nullable: true })
  async pdfFile(
    @graphql.Args() args: PdfFileFindUniqueArgs
  ): Promise<PdfFile | null> {
    const result = await this.service.pdfFile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PdfFile)
  async createPdfFile(
    @graphql.Args() args: CreatePdfFileArgs
  ): Promise<PdfFile> {
    return await this.service.createPdfFile({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PdfFile)
  async updatePdfFile(
    @graphql.Args() args: UpdatePdfFileArgs
  ): Promise<PdfFile | null> {
    try {
      return await this.service.updatePdfFile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PdfFile)
  async deletePdfFile(
    @graphql.Args() args: DeletePdfFileArgs
  ): Promise<PdfFile | null> {
    try {
      return await this.service.deletePdfFile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [OcrResult], { name: "ocrResults" })
  async findOcrResults(
    @graphql.Parent() parent: PdfFile,
    @graphql.Args() args: OcrResultFindManyArgs
  ): Promise<OcrResult[]> {
    const results = await this.service.findOcrResults(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.Mutation(() => PdfFileCreateInput)
  async UploadPdf(
    @graphql.Args()
    args: PdfFileCreateInput
  ): Promise<PdfFileCreateInput> {
    return this.service.UploadPdf(args);
  }
}
