/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PdfFileService } from "../pdfFile.service";
import { PdfFileCreateInput } from "./PdfFileCreateInput";
import { PdfFile } from "./PdfFile";
import { PdfFileFindManyArgs } from "./PdfFileFindManyArgs";
import { PdfFileWhereUniqueInput } from "./PdfFileWhereUniqueInput";
import { PdfFileUpdateInput } from "./PdfFileUpdateInput";
import { OcrResultFindManyArgs } from "../../ocrResult/base/OcrResultFindManyArgs";
import { OcrResult } from "../../ocrResult/base/OcrResult";
import { OcrResultWhereUniqueInput } from "../../ocrResult/base/OcrResultWhereUniqueInput";

export class PdfFileControllerBase {
  constructor(protected readonly service: PdfFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PdfFile })
  async createPdfFile(
    @common.Body() data: PdfFileCreateInput
  ): Promise<PdfFile> {
    return await this.service.createPdfFile({
      data: data,
      select: {
        createdAt: true,
        filePath: true,
        id: true,
        updatedAt: true,
        uploadTime: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PdfFile] })
  @ApiNestedQuery(PdfFileFindManyArgs)
  async pdfFiles(@common.Req() request: Request): Promise<PdfFile[]> {
    const args = plainToClass(PdfFileFindManyArgs, request.query);
    return this.service.pdfFiles({
      ...args,
      select: {
        createdAt: true,
        filePath: true,
        id: true,
        updatedAt: true,
        uploadTime: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PdfFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pdfFile(
    @common.Param() params: PdfFileWhereUniqueInput
  ): Promise<PdfFile | null> {
    const result = await this.service.pdfFile({
      where: params,
      select: {
        createdAt: true,
        filePath: true,
        id: true,
        updatedAt: true,
        uploadTime: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PdfFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePdfFile(
    @common.Param() params: PdfFileWhereUniqueInput,
    @common.Body() data: PdfFileUpdateInput
  ): Promise<PdfFile | null> {
    try {
      return await this.service.updatePdfFile({
        where: params,
        data: data,
        select: {
          createdAt: true,
          filePath: true,
          id: true,
          updatedAt: true,
          uploadTime: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PdfFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePdfFile(
    @common.Param() params: PdfFileWhereUniqueInput
  ): Promise<PdfFile | null> {
    try {
      return await this.service.deletePdfFile({
        where: params,
        select: {
          createdAt: true,
          filePath: true,
          id: true,
          updatedAt: true,
          uploadTime: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/ocrResults")
  @ApiNestedQuery(OcrResultFindManyArgs)
  async findOcrResults(
    @common.Req() request: Request,
    @common.Param() params: PdfFileWhereUniqueInput
  ): Promise<OcrResult[]> {
    const query = plainToClass(OcrResultFindManyArgs, request.query);
    const results = await this.service.findOcrResults(params.id, {
      ...query,
      select: {
        createdAt: true,
        extractionTime: true,
        id: true,

        pdfFile: {
          select: {
            id: true,
          },
        },

        text: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ocrResults")
  async connectOcrResults(
    @common.Param() params: PdfFileWhereUniqueInput,
    @common.Body() body: OcrResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ocrResults: {
        connect: body,
      },
    };
    await this.service.updatePdfFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ocrResults")
  async updateOcrResults(
    @common.Param() params: PdfFileWhereUniqueInput,
    @common.Body() body: OcrResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ocrResults: {
        set: body,
      },
    };
    await this.service.updatePdfFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ocrResults")
  async disconnectOcrResults(
    @common.Param() params: PdfFileWhereUniqueInput,
    @common.Body() body: OcrResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ocrResults: {
        disconnect: body,
      },
    };
    await this.service.updatePdfFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Post("/upload-pdf")
  @swagger.ApiOkResponse({
    type: PdfFileCreateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UploadPdf(
    @common.Body()
    body: PdfFileCreateInput
  ): Promise<PdfFileCreateInput> {
    return this.service.UploadPdf(body);
  }
}
