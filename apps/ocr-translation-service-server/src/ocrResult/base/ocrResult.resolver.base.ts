/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OcrResult } from "./OcrResult";
import { OcrResultCountArgs } from "./OcrResultCountArgs";
import { OcrResultFindManyArgs } from "./OcrResultFindManyArgs";
import { OcrResultFindUniqueArgs } from "./OcrResultFindUniqueArgs";
import { CreateOcrResultArgs } from "./CreateOcrResultArgs";
import { UpdateOcrResultArgs } from "./UpdateOcrResultArgs";
import { DeleteOcrResultArgs } from "./DeleteOcrResultArgs";
import { TranslationFindManyArgs } from "../../translation/base/TranslationFindManyArgs";
import { Translation } from "../../translation/base/Translation";
import { PdfFile } from "../../pdfFile/base/PdfFile";
import { OcrResultCreateInput } from "./OcrResultCreateInput";
import { OcrResultService } from "../ocrResult.service";
@graphql.Resolver(() => OcrResult)
export class OcrResultResolverBase {
  constructor(protected readonly service: OcrResultService) {}

  async _ocrResultsMeta(
    @graphql.Args() args: OcrResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OcrResult])
  async ocrResults(
    @graphql.Args() args: OcrResultFindManyArgs
  ): Promise<OcrResult[]> {
    return this.service.ocrResults(args);
  }

  @graphql.Query(() => OcrResult, { nullable: true })
  async ocrResult(
    @graphql.Args() args: OcrResultFindUniqueArgs
  ): Promise<OcrResult | null> {
    const result = await this.service.ocrResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OcrResult)
  async createOcrResult(
    @graphql.Args() args: CreateOcrResultArgs
  ): Promise<OcrResult> {
    return await this.service.createOcrResult({
      ...args,
      data: {
        ...args.data,

        pdfFile: args.data.pdfFile
          ? {
              connect: args.data.pdfFile,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OcrResult)
  async updateOcrResult(
    @graphql.Args() args: UpdateOcrResultArgs
  ): Promise<OcrResult | null> {
    try {
      return await this.service.updateOcrResult({
        ...args,
        data: {
          ...args.data,

          pdfFile: args.data.pdfFile
            ? {
                connect: args.data.pdfFile,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OcrResult)
  async deleteOcrResult(
    @graphql.Args() args: DeleteOcrResultArgs
  ): Promise<OcrResult | null> {
    try {
      return await this.service.deleteOcrResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Translation], { name: "translations" })
  async findTranslations(
    @graphql.Parent() parent: OcrResult,
    @graphql.Args() args: TranslationFindManyArgs
  ): Promise<Translation[]> {
    const results = await this.service.findTranslations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => PdfFile, {
    nullable: true,
    name: "pdfFile",
  })
  async getPdfFile(
    @graphql.Parent() parent: OcrResult
  ): Promise<PdfFile | null> {
    const result = await this.service.getPdfFile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OcrResultCreateInput)
  async ProcessOcr(
    @graphql.Args()
    args: OcrResultCreateInput
  ): Promise<OcrResultCreateInput> {
    return this.service.ProcessOcr(args);
  }
}
